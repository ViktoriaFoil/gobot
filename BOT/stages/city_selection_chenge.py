import os
import telebot
from telebot import types
import logging
from BOT import log
import BOT.bot as app

token = os.getenv("BOT")
bot = telebot.TeleBot(token)
state = "city_selection"
listCity = []

class City_selection_chenge:

    def message_state_city_selection(self, message):

        towns = types.ReplyKeyboardMarkup(resize_keyboard=True)
        age = app.Keyboards().get_keyboard("age")
        navigation = app.Keyboards().get_keyboard("navigation")

        all_city = sorted(set(app.Cities().get_all_cities()) - set(listCity))
        for city in all_city:
            towns.add(types.KeyboardButton(city))

        if message.text.lower() == "/start":
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥–∞ üèò, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—É—Ä–Ω–∏—Ä—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã –¥–ª—è —Ç–µ–±—è üòâ', reply_markup=towns)
            log.log(message.chat.id, "send command /start", logging.INFO)


        if message.html_text in all_city:
            app.Usercity().add_city(message.chat.id, message.html_text)
            listCity.append(message.html_text)
            bot.send_message(message.chat.id, '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –µ—â–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–∂–º–∏ –î–ê–õ–ï–ï, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–∞–∂–º–∏ –°–¢–û–ü', reply_markup=navigation)
            log.log(message.chat.id, "user selects a city", logging.INFO)


        if message.html_text == '–¥–∞–ª–µ–µ':
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥', reply_markup=towns)
            log.log(message.chat.id, "the user selects an additional city", logging.INFO)


        if message.html_text == '—Å—Ç–æ–ø':
            app.User_botgo().query_change_state("age_category", message.chat.id)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª –¥–ª—è —Ç–µ–±—è —Ç—É—Ä–Ω–∏—Ä—ã. –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —è —Ä–µ–±–µ–Ω–æ–∫, –ø—Ä–∏—Å—ã–ª–∞—é—Å—è –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã. –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —è –≤–∑—Ä–æ—Å–ª—ã–π, —Ç–æ–ª—å–∫–æ –≤–∑—Ä–æ—Å–ª—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã.', reply_markup=age)
            log.log(message.chat.id, "the user has selected all the cities that interest him, switched to the age selection state", logging.INFO)
            listCity.clear()

#=======================================================================================================


    def message_state_city_change(self, message):

        towns = types.ReplyKeyboardMarkup(resize_keyboard=True)
        mainButton = app.Keyboards().get_keyboard("main")
        navigation = app.Keyboards().get_keyboard("navigation")

        all_city = sorted(set(app.Cities().get_all_cities()) - set(listCity))
        for city in all_city:
            towns.add(types.KeyboardButton(city))

        if message.text.lower() == "/start":
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥–∞ üòâ', reply_markup=towns)
            log.log(message.chat.id, "user changes cities", logging.INFO)

        if message.html_text in all_city:
            app.Usercity().add_city(message.chat.id, message.html_text)
            listCity.append(message.html_text)
            bot.send_message(message.chat.id, '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –µ—â–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–∂–º–∏ –î–ê–õ–ï–ï, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–∞–∂–º–∏ –°–¢–û–ü', reply_markup=navigation)

        if message.html_text == '–¥–∞–ª–µ–µ':
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥', reply_markup=towns)

        if message.html_text == '—Å—Ç–æ–ø':
            app.User_botgo().query_change_state('main', message.chat.id)
            bot.send_message(message.chat.id, '–°–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', reply_markup=mainButton)
            log.log(message.chat.id, "the user has successfully changed cities", logging.INFO)
            listCity.clear()
