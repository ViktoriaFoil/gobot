import os
import time
from threading import Thread
import telebot
from telebot import types
import main
import logging
import mysql_dbconfig as db
import log
import queries_to_tables.cities as cities
import queries_to_tables.user_botgo as user_botgo
import queries_to_tables.tournament_go as tournament_go
import queries_to_tables.usercity as usercity
import queries_to_tables.keyboards as keyboards

token = os.getenv("BOT")
bot = telebot.TeleBot(token)
state = "city_selection"
global listCity
listCity = []


@bot.message_handler(content_types=['text'])

def message(message):

    towns = types.ReplyKeyboardMarkup(resize_keyboard=True)
    mainButton = keyboards.get_keyboard("main")
    age = keyboards.get_keyboard("age")
    navigation = keyboards.get_keyboard("navigation")

    users = [
        message.chat.id, message.chat.first_name, message.chat.last_name, message.chat.username, "city_selection"]

    user_botgo.query_users(users)
    SelectState = user_botgo.selectState(message.chat.id)

#=======================================================================================================
#–ò–°–ü–†–ê–í–ù–û

    if SelectState == "city_selection":
        all_city = sorted(set(cities.get_all_cities()) - set(listCity))
        for city in all_city:
            towns.add(types.KeyboardButton(city))


        if message.text.lower() == "/start":
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥–∞ üèò, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—É—Ä–Ω–∏—Ä—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã –¥–ª—è —Ç–µ–±—è üòâ', reply_markup=towns)
            log.log(message.chat.id, "send command /start", logging.INFO)


        if message.html_text in all_city:
            usercity.add_city(message.chat.id, message.html_text)
            listCity.append(message.html_text)
            bot.send_message(message.chat.id, '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –µ—â–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–∂–º–∏ –î–ê–õ–ï–ï, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–∞–∂–º–∏ –°–¢–û–ü', reply_markup=navigation)
            log.log(message.chat.id, "user selects a city", logging.INFO)


        if message.html_text == '–¥–∞–ª–µ–µ':
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥', reply_markup=towns)
            log.log(message.chat.id, "the user selects an additional city", logging.INFO)


        if message.html_text == '—Å—Ç–æ–ø':
            user_botgo.query_change_state("age_category", message.chat.id)
            SelectState = user_botgo.selectState(message.chat.id)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª –¥–ª—è —Ç–µ–±—è —Ç—É—Ä–Ω–∏—Ä—ã. –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —è —Ä–µ–±–µ–Ω–æ–∫, –ø—Ä–∏—Å—ã–ª–∞—é—Å—è –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã. –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —è –≤–∑—Ä–æ—Å–ª—ã–π, —Ç–æ–ª—å–∫–æ –≤–∑—Ä–æ—Å–ª—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã.', reply_markup=age)
            log.log(message.chat.id, "the user has selected all the cities that interest him, switched to the age selection state", logging.INFO)
            listCity.clear()

#=======================================================================================================
#–ò–°–ü–†–ê–í–ù–û

    if SelectState == "change_city":
        all_city = sorted(set(cities.get_all_cities()) - set(listCity))
        for city in all_city:
            towns.add(types.KeyboardButton(city))

        if message.text.lower() == "/start":
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥–∞ üòâ', reply_markup=towns)
            log.log(message.chat.id, "user changes cities", logging.INFO)


        if message.html_text in all_city:
            usercity.add_city(message.chat.id, message.html_text)
            listCity.append(message.html_text)
            bot.send_message(message.chat.id, '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –µ—â–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–∂–º–∏ –î–ê–õ–ï–ï, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –Ω–∞–∂–º–∏ –°–¢–û–ü', reply_markup=navigation)


        if message.html_text == '–¥–∞–ª–µ–µ':
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥', reply_markup=towns)


        if message.html_text == '—Å—Ç–æ–ø':
            user_botgo.query_change_state('main', message.chat.id)
            SelectState = user_botgo.selectState(message.chat.id)
            bot.send_message(message.chat.id, '–°–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', reply_markup=mainButton)
            log.log(message.chat.id, "the user has successfully changed cities", logging.INFO)
            listCity.clear()
            return


#=======================================================================================================
#–ò–°–ü–†–ê–í–ù–û

    if SelectState == "age_category":
        if message.text.lower() == "—è —Ä–µ–±–µ–Ω–æ–∫, –¥–æ 18 –ª–µ—Ç":
            user_botgo.subscribe_to_child_change(message.chat.id, 1)
            welcome(message.chat, mainButton)
            log.log(message.chat.id, "this user is child", logging.INFO)
        if message.text.lower() == "—è –≤–∑—Ä–æ—Å–ª—ã–π":
            welcome(message.chat, mainButton)
            log.log(message.chat.id, "this user is adult", logging.INFO)
        return

#=======================================================================================================
 #–ò–°–ü–†–ê–í–ù–û

    if SelectState == "main":
        if message.text.lower() == "/start" or message.text.lower() == "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ":
            bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, ' + message.chat.first_name, reply_markup=mainButton)
            log.log(message.chat.id, "send command /start", logging.INFO)
            return


        if message.text.lower() == "/my_city" or message.text.lower() == "–º–æ–π¬†–≥–æ—Ä–æ–¥" or message.text.lower() == "–º–æ–π –≥–æ—Ä–æ–¥":
            log.log(message.chat.id, "send command /my_city", logging.INFO)
            for city in cities.my_city(message.chat.id):
                bot.send_message(message.chat.id, city, reply_markup=mainButton)
            return

        # –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
        if message.text.lower() == "/tournaments_in_my_city" or message.text.lower() == "—Ç—É—Ä–Ω–∏—Ä—ã¬†–≤¬†–º–æ–µ–º¬†–≥–æ—Ä–æ–¥–µ" or message.text.lower() == "—Ç—É—Ä–Ω–∏—Ä—ã –≤ –º–æ–µ–º –≥–æ—Ä–æ–¥–µ":
            userID = user_botgo.getUserIdByChatId(message.chat.id)
            if user_botgo.is_user_child(userID):
                tournaments = tournament_go.all_tournaments_in_city(userID)
                if len(tournaments) == 0:
                    bot.send_message(message.chat.id, '–í —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ :(',reply_markup=mainButton)
                else:
                    for tournament in tournaments:
                        bot.send_message(message.chat.id, '–¢—É—Ä–Ω–∏—Ä –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ üèÜ... \n\n' + tournament,reply_markup=mainButton)
                log.log(message.chat.id, "send command /tournaments_in_my_city, is child", logging.INFO)
            else:
                tournaments = tournament_go.get_adult_tournaments_in_city(userID)
                log.log(message.chat.id, "send command /tournaments_in_my_city, is adult", logging.INFO)
                if len(tournaments) == 0:
                    bot.send_message(message.chat.id, '–í —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ :(', reply_markup=mainButton)
                else:
                    for tournament in tournaments:
                        bot.send_message(message.chat.id, '–¢—É—Ä–Ω–∏—Ä –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ üèÜ... \n\n' + tournament, reply_markup=mainButton)
            return


        if message.text.lower() == "/message_to_developer" or message.text.lower() == "—Å–æ–æ–±—â–µ–Ω–∏–µ¬†–∞–≤—Ç–æ—Ä—É" or message.text.lower() == "—Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É":
            user_botgo.query_change_state("message_to_developer", message.chat.id)
            SelectState = user_botgo.selectState(message.chat.id)
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –æ–± –æ—à–∏–±–∫–∞—Ö, –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—è—Ö, –∏ —Ç–ø. –û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É', reply_markup=types.ReplyKeyboardRemove())
            log.log(message.chat.id, "send command /message_to_developer, change of state", logging.INFO)
            return


        if message.text.lower() == "/change_city" or message.text.lower() == "—Å–º–µ–Ω–∏—Ç—å¬†–≥–æ—Ä–æ–¥" or message.text.lower() == "—Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥":
            usercity.remove_city_for_user(message.chat.id)
            user_botgo.query_change_state("change_city", message.chat.id)
            SelectState = user_botgo.selectState(message.chat.id)
            log.log(message.chat.id, "send command /change_city, change of state", logging.INFO)
            bot.send_message(message.chat.id, '–Ø –æ—á–∏—Å—Ç–∏–ª —Ç–≤–æ–∏ –≥–æ—Ä–æ–¥–∞', reply_markup=towns)
            bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ /start, –≤—ã–±–∏—Ä–∞–π –Ω–æ–≤—ã–µ –≥–æ—Ä–æ–¥–∞', reply_markup=towns)
            return


        if message.text.lower() == "/child_tournaments" or message.text.lower() == "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è¬†–Ω–∞¬†–¥–µ—Ç—Å–∫–∏–µ¬†—Ç—É—Ä–Ω–∏—Ä—ã" or message.text.lower() == "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–µ—Ç—Å–∫–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã":
            for flag in user_botgo.get_flag_is_child(message.chat.id):
                if flag[0] == 0:
                    bot.send_message(message.chat.id, '–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –¥–µ—Ç—Å–∫–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤. –≠—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /become_an_adult', reply_markup=mainButton)
                    user_botgo.subscribe_to_child_change(message.chat.id, 1)
                    log.log(message.chat.id, "send command /child_tournaments, change of state", logging.INFO)
                if flag[0] == 1:
                    bot.send_message(message.chat.id, '–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –¥–µ—Ç—Å–∫–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã', reply_markup=mainButton)
                    log.log(message.chat.id, "send command /child_tournaments", logging.INFO)
            return


        if message.text.lower() == "/become_an_adult" or message.text.lower() == "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è¬†–æ—Ç¬†–¥–µ—Ç—Å–∫–∏—Ö¬†—Ç—É—Ä–Ω–∏—Ä–æ–≤" or message.text.lower() == "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –¥–µ—Ç—Å–∫–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤":
            for flag in user_botgo.get_flag_is_child(message.chat.id):
                if flag[0] == 0:
                    bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ –±—ã–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–µ—Ç—Å–∫–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã', reply_markup=mainButton)
                    log.log(message.chat.id, "send command /become_an_adult", logging.INFO)
                if flag[0] == 1:
                    user_botgo.subscribe_to_child_change(message.chat.id, 0)
                    bot.send_message(message.chat.id, '–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–µ—Ç—Å–∫–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤', reply_markup=mainButton)
                    log.log(message.chat.id, "send command /become_an_adult,change of state", logging.INFO)
            return
        else:
            bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ :(')


#=======================================================================================================
  #–ò–°–ê–ü–†–ê–í–ù–û

    if SelectState == "message_to_developer" and message.text.lower() != "/message_to_developer" and message.text.lower() != "—Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É":
        bot.send_message(925936432, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: \n{message.chat.id}\n{message.html_text}")
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–∏–ª")
        user_botgo.query_change_state("main", message.chat.id)
        log.log(message.chat.id, "sent a letter to the developer, change of state", logging.INFO)
        bot.send_message(message.chat.id, '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –µ—â–µ —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /message_to_developer', reply_markup=mainButton)

#=======================================================================================================

def push_message(): #–ü–†–û–í–ï–†–ò–¢–¨
    try:
        for new_tournaments in tournament_go.get_new_tournaments(): # –Ω–æ–≤—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
            for UserCity in usercity.get_user_subscription_city(): # –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if new_tournaments[3] == UserCity[1]: # –µ—Å–ª–∏ id –≥–æ—Ä–æ–¥–∞ –∏–∑ –Ω–æ–≤—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Ä–æ–≤–Ω–æ id –≥–æ—Ä–æ–¥–∞ –≤ –ø–æ–¥–ø–∏—Å–∫–∞—Ö, —Ç–æ
                    #userId = UserCity[0]
                    if(user_botgo.is_user_child(UserCity[0])): #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–±–µ–Ω–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã
                        for tournament in tournament_go.tournaments_for_user(UserCity[0]): #–∑–∞–ø—Ä–æ—Å —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—É—Ä–Ω–∏—Ä–∞
                            chatID = user_botgo.getChatIdByUserId(UserCity[0])
                            bot.send_message(chatID, "–í —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –ø–æ—è–≤–∏–ª—Å—è —Ç—É—Ä–Ω–∏—Ä \n\n" + tournament) #–æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                            log.log(message.chat.id, "a new children's tournament has been sent", logging.INFO)
                    else: # –∏–Ω–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑—Ä–æ—Å–ª—ã–π
                        for tournament in tournament_go.tournaments_for_user_adult(UserCity[0]): #–∑–∞–ø—Ä–æ—Å —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—É—Ä–Ω–∏—Ä–∞
                            chatID = user_botgo.getChatIdByUserId(UserCity[0])
                            bot.send_message(chatID, "–í —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –ø–æ—è–≤–∏–ª—Å—è —Ç—É—Ä–Ω–∏—Ä \n\n" + tournament) #–æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                            log.log(message.chat.id, "new tournament sent", logging.INFO)
    except Exception as e:
            print(e)
    except AssertionError():
            print( "!!!!!!! user has been blocked !!!!!!!" )


def welcome(chat, mainButton):
    user_botgo.query_change_state("main", chat.id)
    SelectState = user_botgo.selectState(chat.id)
    bot.send_message(chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëã, ' + chat.first_name, reply_markup=mainButton)


def background():
    while True:
        main.download_page("https://gofederation.ru/tournaments/", "current.html"),  # —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤
        main.compare("current.html", "old.html"),  # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        main.copy_current_to_old("old.html", "current.html"),  # –∑–∞–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ –Ω–∞ –Ω–æ–≤–æ–µ
        main.main(),  # –∑–∞–ø–∏—Å—å –Ω–æ–≤—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
        push_message(),  # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–æ–≤—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö
        tournament_go.delete_old_tournaments(),  # —É–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ –¥–∞—Ç–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        log.log(0, "stop cycle for 60 seconds", logging.INFO)

        time.sleep(60)


if __name__ == '__main__':
    t1 = Thread(target=background, args=())
    t1.start()
    bot.polling(none_stop=True)
    db.close_connect_db()