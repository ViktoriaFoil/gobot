import os
import telebot
from telebot import types
import logging

from APP.logs.log import log
from APP.queries_to_tables.cities import Cities
from APP.queries_to_tables.keyboards import Keyboards
from APP.queries_to_tables.tournament_go import Tournament_go
from APP.queries_to_tables.user_botgo import User_botgo
from APP.queries_to_tables.usercity import User_City

token = os.getenv("BOT")
bot = telebot.TeleBot(token)


class State_main:

    @staticmethod
    def message_state_main(message):

        towns = types.ReplyKeyboardMarkup(resize_keyboard=True)
        mainButton = Keyboards.get_keyboard("main")

        if message.text.lower() == "/start" or message.text.lower() == "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ":
            bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.chat.first_name}", reply_markup=mainButton)
            log(message.chat.id, "send command /start", logging.INFO)
            return

        if message.text.lower() == "/my_city" or \
                message.text.lower() == "–º–æ–π¬†–≥–æ—Ä–æ–¥" or \
                message.text.lower() == "–º–æ–π –≥–æ—Ä–æ–¥":
            log(message.chat.id, "send command /my_city", logging.INFO)
            for city in Cities(message.chat.id).my_city():
                bot.send_message(message.chat.id, city, reply_markup=mainButton)
            return

        if message.text.lower() == "/tournaments_in_my_city" or \
                message.text.lower() == "—Ç—É—Ä–Ω–∏—Ä—ã¬†–≤¬†–º–æ–µ–º¬†–≥–æ—Ä–æ–¥–µ" or \
                message.text.lower() == "—Ç—É—Ä–Ω–∏—Ä—ã –≤ –º–æ–µ–º –≥–æ—Ä–æ–¥–µ":
            if User_botgo(message.chat.id).is_user_child():
                tournaments = Tournament_go(message.chat.id).all_tournaments_in_city()
                if len(tournaments) == 0:
                    bot.send_message(message.chat.id, '–í —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ :(',
                                     reply_markup=mainButton)
                else:
                    for tournament in tournaments:
                        bot.send_message(message.chat.id, f"–¢—É—Ä–Ω–∏—Ä –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ üèÜ... \n\n {tournament}",
                                         reply_markup=mainButton)
                log(message.chat.id, "send command /tournaments_in_my_city, is child", logging.INFO)
            else:
                tournaments = Tournament_go(message.chat.id).get_adult_tournaments_in_city()
                log(message.chat.id, "send command /tournaments_in_my_city, is adult", logging.INFO)
                if len(tournaments) == 0:
                    bot.send_message(message.chat.id, '–í —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ :(',
                                     reply_markup=mainButton)
                else:
                    for tournament in tournaments:
                        bot.send_message(message.chat.id, f"–¢—É—Ä–Ω–∏—Ä –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ üèÜ... \n\n {tournament}",
                                         reply_markup=mainButton)
            return

        if message.text.lower() == "/message_to_developer" or \
                message.text.lower() == "—Å–æ–æ–±—â–µ–Ω–∏–µ¬†–∞–≤—Ç–æ—Ä—É" or \
                message.text.lower() == "—Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É":
            User_botgo(message.chat.id).query_change_state("message_to_developer")
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –æ–± –æ—à–∏–±–∫–∞—Ö, –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—è—Ö, –∏ —Ç–ø. '
                                              '–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É',
                             reply_markup=types.ReplyKeyboardRemove())
            log(message.chat.id, "send command /message_to_developer, change of state", logging.INFO)
            return

        if message.text.lower() == "/change_city" or \
                message.text.lower() == "—Å–º–µ–Ω–∏—Ç—å¬†–≥–æ—Ä–æ–¥" or \
                message.text.lower() == "—Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥":
            User_City(message.chat.id).remove_city_for_user()
            User_botgo(message.chat.id).query_change_state("change_city")
            log(message.chat.id, "send command /change_city, change of state", logging.INFO)
            bot.send_message(message.chat.id, '–Ø –æ—á–∏—Å—Ç–∏–ª —Ç–≤–æ–∏ –≥–æ—Ä–æ–¥–∞', reply_markup=towns)
            bot.send_message(message.chat.id, '–ù–∞–∂–º–∏ /start, –≤—ã–±–∏—Ä–∞–π –Ω–æ–≤—ã–µ –≥–æ—Ä–æ–¥–∞', reply_markup=towns)
            return

        if message.text.lower() == "/child_tournaments" or \
                message.text.lower() == "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è¬†–Ω–∞¬†–¥–µ—Ç—Å–∫–∏–µ¬†—Ç—É—Ä–Ω–∏—Ä—ã" or \
                message.text.lower() == "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–µ—Ç—Å–∫–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã":
            for flag in User_botgo(message.chat.id).get_flag_is_child():
                if flag[0] == 0:
                    bot.send_message(message.chat.id, '–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –¥–µ—Ç—Å–∫–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤. '
                                                      '–≠—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /become_an_adult',
                                     reply_markup=mainButton)
                    User_botgo(message.chat.id).subscribe_to_child_change(1)
                    log(message.chat.id, "send command /child_tournaments, change of state", logging.INFO)
                if flag[0] == 1:
                    bot.send_message(message.chat.id, '–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –¥–µ—Ç—Å–∫–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã', reply_markup=mainButton)
                    log(message.chat.id, "send command /child_tournaments", logging.INFO)
            return

        if message.text.lower() == "/become_an_adult" or \
                message.text.lower() == "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è¬†–æ—Ç¬†–¥–µ—Ç—Å–∫–∏—Ö¬†—Ç—É—Ä–Ω–∏—Ä–æ–≤" or \
                message.text.lower() == "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –¥–µ—Ç—Å–∫–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤":
            for flag in User_botgo(message.chat.id).get_flag_is_child():
                if flag[0] == 0:
                    bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –Ω–µ –±—ã–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–µ—Ç—Å–∫–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã',
                                     reply_markup=mainButton)
                    log(message.chat.id, "send command /become_an_adult", logging.INFO)
                if flag[0] == 1:
                    User_botgo(message.chat.id).subscribe_to_child_change(0)
                    bot.send_message(message.chat.id, '–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–µ—Ç—Å–∫–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤',
                                     reply_markup=mainButton)
                    log(message.chat.id, "send command /become_an_adult,change of state", logging.INFO)
            return
        else:
            bot.send_message(message.chat.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ :(')
